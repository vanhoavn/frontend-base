import VueType, * as Vue from 'vue'

type Cls<T> = VztVueSimpleClass<T>;

type Constructor<T> = new(...args: any[]) => T;

export function Mixin<A>(parent: Cls<A>): Cls<A>
export function Mixin<A, B>(parent: Cls<A>, trait1: Cls<B>): Cls<A & B>
export function Mixin<A, B, C>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>): Cls<A & B & C>
export function Mixin<A, B, C, D>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>): Cls<A & B & C & D>
export function Mixin<A, B, C, D, E>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>): Cls<A & B & C & D & E>
export function Mixin<A, B, C, D, E, F>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>): Cls<A & B & C & D & E & F>
export function Mixin<A, B, C, D, E, F, G>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>): Cls<A & B & C & D & E & F & G>
export function Mixin<A, B, C, D, E, F, G, H>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>): Cls<A & B & C & D & E & F & G & H>
export function Mixin<A, B, C, D, E, F, G, H, I>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>): Cls<A & B & C & D & E & F & G & H & I>
export function Mixin<A, B, C, D, E, F, G, H, I, J>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>, trait9: Cls<J>): Cls<A & B & C & D & E & F & G & H & I & J>
export function Mixin<A, B, C, D, E, F, G, H, I, J, K>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>, trait9: Cls<J>, trait10: Cls<K>): Cls<A & B & C & D & E & F & G & H & I & J & K>
export function Mixin<A, B, C, D, E, F, G, H, I, J, K, L>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>, trait9: Cls<J>, trait10: Cls<K>, trait11: Cls<L>): Cls<A & B & C & D & E & F & G & H & I & J & K & L>
export function Mixin<A, B, C, D, E, F, G, H, I, J, K, L, M>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>, trait9: Cls<J>, trait10: Cls<K>, trait11: Cls<L>, trait12: Cls<M>): Cls<A & B & C & D & E & F & G & H & I & J & K & L & M>
export function Mixin<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>, trait9: Cls<J>, trait10: Cls<K>, trait11: Cls<L>, trait12: Cls<M>, trait13: Cls<N>): Cls<A & B & C & D & E & F & G & H & I & J & K & L & M & N>
export function Mixin<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>, trait9: Cls<J>, trait10: Cls<K>, trait11: Cls<L>, trait12: Cls<M>, trait13: Cls<N>, trait14: Cls<O>): Cls<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O>
export function Mixin<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>, trait9: Cls<J>, trait10: Cls<K>, trait11: Cls<L>, trait12: Cls<M>, trait13: Cls<N>, trait14: Cls<O>, trait15: Cls<P>): Cls<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P>
export function Mixin<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>, trait9: Cls<J>, trait10: Cls<K>, trait11: Cls<L>, trait12: Cls<M>, trait13: Cls<N>, trait14: Cls<O>, trait15: Cls<P>, trait16: Cls<Q>): Cls<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q>
export function Mixin<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>, trait9: Cls<J>, trait10: Cls<K>, trait11: Cls<L>, trait12: Cls<M>, trait13: Cls<N>, trait14: Cls<O>, trait15: Cls<P>, trait16: Cls<Q>, trait17: Cls<R>): Cls<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q & R>
export function Mixin<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>, trait9: Cls<J>, trait10: Cls<K>, trait11: Cls<L>, trait12: Cls<M>, trait13: Cls<N>, trait14: Cls<O>, trait15: Cls<P>, trait16: Cls<Q>, trait17: Cls<R>, trait18: Cls<S>): Cls<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q & R & S>
export function Mixin<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>, trait9: Cls<J>, trait10: Cls<K>, trait11: Cls<L>, trait12: Cls<M>, trait13: Cls<N>, trait14: Cls<O>, trait15: Cls<P>, trait16: Cls<Q>, trait17: Cls<R>, trait18: Cls<S>, trait19: Cls<T>): Cls<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q & R & S & T>
export function Mixin<T>(parent: Cls<VueType>, ...traits: Cls<VueType>[]): Cls<T> {
    return parent.extend({mixins: traits as any}) as any
}

export function Mixedin<A>(parent: Cls<A>): Cls<A>
export function Mixedin<A, B>(parent: Cls<A>, trait1: Cls<B>): Cls<A & B>
export function Mixedin<A, B, C>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>): Cls<A & B & C>
export function Mixedin<A, B, C, D>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>): Cls<A & B & C & D>
export function Mixedin<A, B, C, D, E>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>): Cls<A & B & C & D & E>
export function Mixedin<A, B, C, D, E, F>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>): Cls<A & B & C & D & E & F>
export function Mixedin<A, B, C, D, E, F, G>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>): Cls<A & B & C & D & E & F & G>
export function Mixedin<A, B, C, D, E, F, G, H>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>): Cls<A & B & C & D & E & F & G & H>
export function Mixedin<A, B, C, D, E, F, G, H, I>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>): Cls<A & B & C & D & E & F & G & H & I>
export function Mixedin<A, B, C, D, E, F, G, H, I, J>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>, trait9: Cls<J>): Cls<A & B & C & D & E & F & G & H & I & J>
export function Mixedin<A, B, C, D, E, F, G, H, I, J, K>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>, trait9: Cls<J>, trait10: Cls<K>): Cls<A & B & C & D & E & F & G & H & I & J & K>
export function Mixedin<A, B, C, D, E, F, G, H, I, J, K, L>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>, trait9: Cls<J>, trait10: Cls<K>, trait11: Cls<L>): Cls<A & B & C & D & E & F & G & H & I & J & K & L>
export function Mixedin<A, B, C, D, E, F, G, H, I, J, K, L, M>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>, trait9: Cls<J>, trait10: Cls<K>, trait11: Cls<L>, trait12: Cls<M>): Cls<A & B & C & D & E & F & G & H & I & J & K & L & M>
export function Mixedin<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>, trait9: Cls<J>, trait10: Cls<K>, trait11: Cls<L>, trait12: Cls<M>, trait13: Cls<N>): Cls<A & B & C & D & E & F & G & H & I & J & K & L & M & N>
export function Mixedin<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>, trait9: Cls<J>, trait10: Cls<K>, trait11: Cls<L>, trait12: Cls<M>, trait13: Cls<N>, trait14: Cls<O>): Cls<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O>
export function Mixedin<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>, trait9: Cls<J>, trait10: Cls<K>, trait11: Cls<L>, trait12: Cls<M>, trait13: Cls<N>, trait14: Cls<O>, trait15: Cls<P>): Cls<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P>
export function Mixedin<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>, trait9: Cls<J>, trait10: Cls<K>, trait11: Cls<L>, trait12: Cls<M>, trait13: Cls<N>, trait14: Cls<O>, trait15: Cls<P>, trait16: Cls<Q>): Cls<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q>
export function Mixedin<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>, trait9: Cls<J>, trait10: Cls<K>, trait11: Cls<L>, trait12: Cls<M>, trait13: Cls<N>, trait14: Cls<O>, trait15: Cls<P>, trait16: Cls<Q>, trait17: Cls<R>): Cls<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q & R>
export function Mixedin<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>, trait9: Cls<J>, trait10: Cls<K>, trait11: Cls<L>, trait12: Cls<M>, trait13: Cls<N>, trait14: Cls<O>, trait15: Cls<P>, trait16: Cls<Q>, trait17: Cls<R>, trait18: Cls<S>): Cls<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q & R & S>
export function Mixedin<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T>(parent: Cls<A>, trait1: Cls<B>, trait2: Cls<C>, trait3: Cls<D>, trait4: Cls<E>, trait5: Cls<F>, trait6: Cls<G>, trait7: Cls<H>, trait8: Cls<I>, trait9: Cls<J>, trait10: Cls<K>, trait11: Cls<L>, trait12: Cls<M>, trait13: Cls<N>, trait14: Cls<O>, trait15: Cls<P>, trait16: Cls<Q>, trait17: Cls<R>, trait18: Cls<S>, trait19: Cls<T>): Cls<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q & R & S & T>
export function Mixedin<T>(parent: Cls<VueType>, ...traits: Cls<VueType>[]): Cls<T> {
    return parent as any
}
